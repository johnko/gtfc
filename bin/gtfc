#!/bin/sh
######################################################################
# LICENSE pulled in with, cat LICENSE | awk '{print "# "$0}'
######################################################################
# Copyright (c) 2015, John Ko
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
######################################################################
# Script version is yymmdd-HHMMSS in UTC, date +%y%m%d-%H%M%S
######################################################################
SCRIPTVERSION=150117-004355

######################################################################
# ssh-keygen id_rsa
######################################################################
cd ${HOME}

[ -f ${HOME}/.ssh/id_rsa ] \
  || ssh-keygen -N '' -t rsa -b 4096 -f ${HOME}/.ssh/id_rsa
[ -f ${HOME}/.ssh/authorized_keys2 ] \
  || cp ${HOME}/.ssh/id_rsa.pub ${HOME}/.ssh/authorized_keys2

######################################################################
# 1. on HOSTA as urep, run: gtfc init HOSTA folder
######################################################################
FOLDER=$3
if [ "x" = "x$FOLDER"]; then
  FOLDER="gitsync"
fi

if [ "init" = "$1" ]; then

  [ -d ${FOLDER} ] || git init ${FOLDER}
  [ -d ${FOLDER} ] || exit 1

  cd ${FOLDER}
  git config user.email "urep@localhost"
  git config user.name "urep"
  git remote add ${2} urep@${2}:~/${FOLDER}
  cp /usr/home/urep/.ssh/authorized_keys2 authorized_keys2
  cp .git/config config
  cat >crontab.pullall <<EOF
* * * * * sh /usr/home/urep/${FOLDER}/gitpullall.sh
EOF
  cat >gitpullall.sh <<EOF
#!/bin/sh
if [ "\$1" != "-f" ]; then
  pgrep -lf gitpullall.sh >/dev/null 2>&1 && exit 1
fi
cd /usr/home/urep/${FOLDER}
setupauthkeys2() {
  diff config .git/config || cp config .git/config
  if ! diff authorized_keys2 /usr/home/urep/.ssh/authorized_keys2 ; then
    cat   authorized_keys2 /usr/home/urep/.ssh/id_rsa.pub | sort -u > /usr/home/urep/.tmpa
    cp /usr/home/urep/.tmpa /usr/home/urep/.ssh/authorized_keys2
  fi
  if ! diff known_hosts /usr/home/urep/.ssh/known_hosts ; then
    cat   known_hosts /usr/home/urep/.ssh/known_hosts | sort -u > /usr/home/urep/.tmpk
    cp /usr/home/urep/.tmpk /usr/home/urep/.ssh/known_hosts
  fi
}
setupauthkeys2
for i in \$(/usr/local/bin/git remote); do
  if echo \$i | grep push >/dev/null 2>&1 ; then
    /usr/local/bin/git push -q \$i master
  else
    /usr/local/bin/git pull -q --ff-only \$i master
  fi
done
setupauthkeys2
if [ -f crontab.pullall.\$(hostname) ]; then
  crontab crontab.pullall.\$(hostname)
else
  crontab crontab.pullall
fi
EOF
  cat >crontab.pullbare <<EOF
* * * * * sh /usr/home/urep/${FOLDER}/gitpullbare.sh
EOF
  cat >gitpullbare.sh <<EOF
#!/bin/sh
if [ "\$1" != "-f" ]; then
  pgrep -lf gitpullbare.sh >/dev/null 2>&1 && exit 1
fi
cd /usr/home/urep/${FOLDER}
setupauthkeys2() {
  if ! diff authorized_keys2 /usr/home/urep/.ssh/authorized_keys2 ; then
    cat   authorized_keys2 /usr/home/urep/.ssh/id_rsa.pub | sort -u > /usr/home/urep/.tmpa
    cp /usr/home/urep/.tmpa /usr/home/urep/.ssh/authorized_keys2
  fi
  if ! diff known_hosts /usr/home/urep/.ssh/known_hosts ; then
    cat   known_hosts /usr/home/urep/.ssh/known_hosts | sort -u > /usr/home/urep/.tmpk
    cp /usr/home/urep/.tmpk /usr/home/urep/.ssh/known_hosts
  fi
}
setupauthkeys2
/usr/local/bin/git pull -q --ff-only
setupauthkeys2
if [ -f crontab.pullbare.\$(hostname) ]; then
  crontab crontab.pullbare.\$(hostname)
else
  crontab crontab.pullbare
fi
EOF
  sh gitpullall.sh
  cp /usr/home/urep/.ssh/known_hosts known_hosts
  git add .
  git commit -m "added $2 to config, `hostname` to authorized_keys2, known_hosts"
  # end of init

######################################################################
# This can be skipped if you ssh -A urep@hostB gtfc clone HOSTA
# 2. on HOSTA as urep, run: gtfc add hostB
######################################################################
elif [ "add" = "$1" ]; then # run this on HOSTA before running on clones
  [ -d ${FOLDER} ] || exit 1
  cd ${FOLDER}
  git remote add ${2} urep@${2}:~/${FOLDER}
  while diff .git/config config ; do
    sleep 1
  done
  cp .git/config config
  git add .
  git commit -m "added $2 to config"
  # end of add

######################################################################
# 3. on hostB as urep, run: gtfc clone HOSTA
######################################################################
elif [ "clone" = "$1" ]; then # run on clones
  ssh urep@${2} "gtfc add `hostname`"
  [ -d ${FOLDER} ] || git clone urep@${2}:~/${FOLDER}
  [ -d ${FOLDER} ] || exit 1
  cd ${FOLDER}
  sh gitpullall.sh
  cp /usr/home/urep/.ssh/authorized_keys2 authorized_keys2
  cp /usr/home/urep/.ssh/known_hosts known_hosts
  git add .
  git commit -m "added `hostname` to authorized_keys2, known_hosts"
######################################################################
# 4. on HOSTA as urep, run: sh ${FOLDER}/gitpullall.sh
######################################################################
  cat <<EOF
Can't run this for you because you may have ssh forwarding on
.............................................
  On urep@$2, run: sh ${FOLDER}/gitpullall.sh
.............................................
EOF

######################################################################
# 5. on HOSTA as urep, run: gtfc push hostB
######################################################################
elif [ "push" = "$1" ]; then
  [ -d ${FOLDER} ] || exit 1
  cd ${FOLDER}
  git remote add push${2} urep@${2}:~/${FOLDER}push
  ssh urep@${2} 'git init --bare ${FOLDER}push'
  while diff .git/config config ; do
    sleep 1
  done
  cp .git/config config
  cp /usr/home/urep/.ssh/known_hosts known_hosts
  git add .
  git commit -m "added push$2 to config, $2 to known_hosts"
  git push push${2} master
  ssh urep@${2} 'git clone ${FOLDER}push ${FOLDER}'
  ssh urep@${2} 'sh ${FOLDER}/gitpullbare.sh'
  # end of push

fi
