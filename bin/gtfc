#!/bin/sh
######################################################################
# LICENSE pulled in with, cat LICENSE | awk '{print "# "$0}'
######################################################################
# Copyright (c) 2015, John Ko
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
######################################################################
# Script version is yymmdd-HHMMSS in UTC, date +%y%m%d-%H%M%S
######################################################################
SCRIPTVERSION=150123-152840

MYUSER="urep"
MYHOSTNAME="`hostname`"
PEERPORT="22"

######################################################################
# ssh-keygen id_rsa
######################################################################
cd ${HOME}

[ -f ${HOME}/.ssh/id_rsa ] \
  || ssh-keygen -N '' -t rsa -b 4096 -f ${HOME}/.ssh/id_rsa
[ -f ${HOME}/.ssh/authorized_keys2 ] \
  || echo "command=\"git-shell -c \\\"\$SSH_ORIGINAL_COMMAND\\\"\" `cat ${HOME}/.ssh/id_rsa.pub`" >${HOME}/.ssh/authorized_keys2

######################################################################
# 1. on HOSTA as ${MYUSER}, run: gtfc init HOSTA folder
######################################################################
TOSPLIT=$2
if [ "x" != "x${TOSPLIT%@*}" ]; then
  MYUSER="${TOSPLIT%@*}"
fi
HOSTANDPORT="${TOSPLIT#*@}"
if [ "x" != "x${HOSTANDPORT}" ]; then
  HOST="${HOSTANDPORT%:*}"
  PEERPORT="${HOSTANDPORT#*:}"
fi
if [ "x" = "x$HOST" ]; then
  HOST="`hostname -s`"
fi

FOLDER=$3
if [ "x" = "x$FOLDER" ]; then
  FOLDER="~/gitsync"
fi

if [ "init" = "$1" ]; then

  [ -d ${FOLDER} ] || git init ${FOLDER}
  [ -d ${FOLDER} ] || exit 1

  cd ${FOLDER}
  mkdir .gtfc
  git config user.email "${MYUSER}@localhost"
  git config user.name "${MYUSER}"
  git remote add ${HOST} ssh://${MYUSER}@${HOST}:${PEERPORT}/${FOLDER}
  cp ${HOME}/.ssh/authorized_keys2 .gtfc/authorized_keys2
  cp .git/config .gtfc/config
  cat >.gtfc/crontab.pullall <<EOF
* * * * * sh ${HOME}/${FOLDER}/.gtfc/gitpullall.sh
EOF
  cat >.gtfc/gitpullall.sh <<EOF
#!/bin/sh
if [ "\$1" != "-f" ]; then
  pgrep -lf gitpullall.sh >/dev/null 2>&1 && exit 1
fi
cd \${HOME}/${FOLDER}
setupauthkeys2() {
       GTFCCONFIG=.gtfc/config
  [            -e .gtfc/config.\$(hostname) ] \
    && GTFCCONFIG=.gtfc/config.\$(hostname)
  diff \$GTFCCONFIG .git/config || cp \$GTFCCONFIG .git/config

       GTFCAUTHKEYS=.gtfc/authorized_keys2
  [              -e .gtfc/authorized_keys2.\$(hostname) ] \
    && GTFCAUTHKEYS=.gtfc/authorized_keys2.\$(hostname)
  if ! diff \$GTFCAUTHKEYS \${HOME}/.ssh/authorized_keys2 ; then
    echo "command=\"git-shell -c \\\\\"\\\$SSH_ORIGINAL_COMMAND\\\\\"\" \`cat \${HOME}/.ssh/id_rsa.pub\`" >\${HOME}/.tmpa
    cat     \$GTFCAUTHKEYS \${HOME}/.tmpa | sort -u >\${HOME}/.ssh/authorized_keys2
  fi

       GTFCKNOWNHOSTS=.gtfc/known_hosts
  [                -e .gtfc/known_hosts.\$(hostname) ] \
    && GTFCKNOWNHOSTS=.gtfc/known_hosts.\$(hostname)
  if ! diff \$GTFCKNOWNHOSTS \${HOME}/.ssh/known_hosts ; then
    cat     \$GTFCKNOWNHOSTS \${HOME}/.ssh/known_hosts | sort -u >\${HOME}/.tmpk
    cp \${HOME}/.tmpk \${HOME}/.ssh/known_hosts
  fi
}
setupauthkeys2
for i in \$(/usr/local/bin/git remote); do
  if echo \$i | grep push >/dev/null 2>&1 ; then
    /usr/local/bin/git push -q           \$i master
  else
    /usr/local/bin/git pull -q --ff-only \$i master
  fi
done
setupauthkeys2
if [   -e .gtfc/crontab.pullall.\$(hostname) ]; then
  crontab .gtfc/crontab.pullall.\$(hostname)
else
  crontab .gtfc/crontab.pullall
fi
EOF
  cat >.gtfc/crontab.pullbare <<EOF
* * * * * sh ${HOME}/${FOLDER}/.gtfc/gitpullbare.sh
EOF
  cat >.gtfc/gitpullbare.sh <<EOF
#!/bin/sh
if [ "\$1" != "-f" ]; then
  pgrep -lf gitpullbare.sh >/dev/null 2>&1 && exit 1
fi
cd \${HOME}/${FOLDER}
setupauthkeys2() {
       GTFCAUTHKEYS=.gtfc/authorized_keys2
  [              -e .gtfc/authorized_keys2.\$(hostname) ] \
    && GTFCAUTHKEYS=.gtfc/authorized_keys2.\$(hostname)
  if ! diff \$GTFCAUTHKEYS \${HOME}/.ssh/authorized_keys2 ; then
    echo "command=\"git-shell -c \\\\\"\\\$SSH_ORIGINAL_COMMAND\\\\\"\" \`cat \${HOME}/.ssh/id_rsa.pub\`" >\${HOME}/.tmpa
    cat     \$GTFCAUTHKEYS \${HOME}/.tmpa | sort -u >\${HOME}/.ssh/authorized_keys2
  fi

       GTFCKNOWNHOSTS=.gtfc/known_hosts
  [                -e .gtfc/known_hosts.\$(hostname) ] \
    && GTFCKNOWNHOSTS=.gtfc/known_hosts.\$(hostname)
  if ! diff \$GTFCKNOWNHOSTS \${HOME}/.ssh/known_hosts ; then
    cat     \$GTFCKNOWNHOSTS \${HOME}/.ssh/known_hosts | sort -u >\${HOME}/.tmpk
    cp \${HOME}/.tmpk \${HOME}/.ssh/known_hosts
  fi
}
setupauthkeys2
/usr/local/bin/git pull -q --ff-only
setupauthkeys2
if [   -e .gtfc/crontab.pullbare.\$(hostname) ]; then
  crontab .gtfc/crontab.pullbare.\$(hostname)
else
  crontab .gtfc/crontab.pullbare
fi
EOF
  sh .gtfc/gitpullall.sh
  cp ${HOME}/.ssh/known_hosts .gtfc/known_hosts
  git add .
  git commit -m "added ${HOST} to config, ${MYHOSTNAME} to authorized_keys2, known_hosts"
  # end of init

######################################################################
# This can be skipped if you ssh -A ${MYUSER}@hostB gtfc clone HOSTA
# 2. on HOSTA as ${MYUSER}, run: gtfc add hostB
######################################################################
elif [ "add" = "$1" ]; then # run this on HOSTA before running on clones
  [ -d ${FOLDER} ] || exit 1
  cd ${FOLDER}
  git remote add ${HOST} ssh://${MYUSER}@${HOST}:${PEERPORT}/${FOLDER}
  while diff .git/config .gtfc/config ; do
    sleep 1
  done
  cp .git/config .gtfc/config
  git add .
  git commit -m "added ${HOST} to config"
  # end of add

######################################################################
# 3. on hostB as ${MYUSER}, run: gtfc clone HOSTA
######################################################################
elif [ "clone" = "$1" ]; then # run on clones
  ssh -t ${MYUSER}@${HOST} "gtfc add ${MYHOSTNAME}"
  [ -d ${FOLDER} ] || git clone ssh://${MYUSER}@${HOST}:${PEERPORT}/${FOLDER}
  [ -d ${FOLDER} ] || exit 1
  cd ${FOLDER}
  if [ -e .gtfc/gitpullall.sh.${MYHOSTNAME} ]; then
       sh .gtfc/gitpullall.sh.${MYHOSTNAME}
  else
       sh .gtfc/gitpullall.sh
  fi
  if [                            -e .gtfc/authorized_keys2.${MYHOSTNAME} ]; then
    cp ${HOME}/.ssh/authorized_keys2 .gtfc/authorized_keys2.${MYHOSTNAME}
  else
    cp ${HOME}/.ssh/authorized_keys2 .gtfc/authorized_keys2
  fi
  if [                       -e .gtfc/known_hosts.${MYHOSTNAME} ]; then
    cp ${HOME}/.ssh/known_hosts .gtfc/known_hosts.${MYHOSTNAME}
  else
    cp ${HOME}/.ssh/known_hosts .gtfc/known_hosts
  fi
  git add .
  git commit -m "added `hostname` to authorized_keys2, known_hosts"
######################################################################
# 4. on HOSTA as ${MYUSER}, run: sh ${FOLDER}/.gtfc/gitpullall.sh -f
# this may be run by gtfcr-add
######################################################################

######################################################################
# 5. optional: on HOSTA as ${MYUSER}, run: gtfc push hostB
######################################################################
elif [ "push" = "$1" ]; then
  [ -d ${FOLDER} ] || exit 1
  cd ${FOLDER}
  git remote add push${HOST} ssh://${MYUSER}@${HOST}:${PEERPORT}/${FOLDER}push
  ssh ${MYUSER}@${HOST} 'git init --bare ${FOLDER}push'
  while diff .git/config .gtfc/config ; do
    sleep 1
  done
  cp .git/config .gtfc/config
  cp ${HOME}/.ssh/known_hosts .gtfc/known_hosts
  git add .
  git commit -m "added push${HOST} to config, ${HOST} to known_hosts"
  git push push${HOST} master
  ssh ${MYUSER}@${HOST} 'git clone ${FOLDER}push ${FOLDER}'
  ssh ${MYUSER}@${HOST} 'sh ${FOLDER}/.gtfc/gitpullbare.sh'
  # end of push

fi
